{"version":3,"sources":["ui/Input/index.js","serviceWorker.js","index.js"],"names":["InputNumber","props","state","focus","innerValue","this","size","children","suffix","onChange","rule","RegExp","message","rest","cls","classNames","input","console","log","className","value","onFocus","e","setState","onBlur","isControl","target","test","defaultValue","Component","defaultProps","App","useState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kTAIMA,G,kBACL,WAAYC,GAAO,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACZC,OAAO,EACPC,WAAY,IAJI,E,sEAgCR,IAAD,SAEPD,EACGE,KAAKH,MADRC,MAFO,EAaJE,KAAKJ,MAPRK,GANO,EAKPC,SALO,EAMPD,MANO,KAOPE,OAPO,EAQPC,SARO,EASPC,aATO,MASD,IAAIC,OATH,EAUPC,EAVO,EAUPA,QACGC,EAXI,wEAcJC,EAAMC,KAAU,GACnBC,OAAO,EACPb,SAFmB,6BAGVG,IAAS,GAHC,cAInB,aAAa,GAJM,IAOpB,OADAW,QAAQC,IAAIL,GAEX,6BACA,yBAAKM,UAAWL,GACf,2BACCM,MAAOf,KAAKe,MAEZC,QAAS,SAAAC,GACR,EAAKC,SAAS,CAACpB,OAAO,KAGvBqB,OAAQ,SAAAF,GACP,EAAKC,SAAS,CAACpB,OAAO,KAGvBM,SAAU,SAACa,GACN,EAAKG,WACR,EAAKF,SAAS,CACbnB,WAAYkB,EAAEI,OAAON,QAGvB,EAAKnB,MAAMQ,SAASa,OAMtB,4BACGZ,EAAKiB,KAAKtB,KAAKe,QAAUR,M,0CAO9BP,KAAKkB,SAAS,CACbnB,WAAYC,KAAKJ,MAAM2B,iB,gCApExB,MAAO,UAAWvB,KAAKJ,Q,4BAIvB,OAAGI,KAAKoB,UACApB,KAAKJ,MAAMmB,MAEXf,KAAKH,MAAME,e,GA5BKyB,cAApB7B,EAeE8B,aAAe,CACrBxB,KAAM,SACNG,SAAU,cA8EZ,IAUesB,EAVH,SAAC9B,GAAW,IAAD,EACI+B,mBAAS,OADb,mBACdZ,EADc,UAErB,OACI,6BACA,kBAAC,EAAD,CAAaA,MAAOA,EAAOX,SAAU,SAAAa,OACrC,kBAAC,EAAD,CAAaM,aAAcR,EAAOX,SAAU,SAAAa,GAAIL,QAAQC,IAAI,2BC5F9Ce,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.23885f75.chunk.js","sourcesContent":["import React,{useState, Component} from 'react'\r\nimport classNames from 'classnames'\r\nimport PropTypes from 'prop-types' \r\nimport './index.scss'\r\nclass InputNumber extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\tfocus: false,\r\n\t\t\tinnerValue: ''\r\n\t\t}\r\n\t}\r\n\tstatic propTypes = {\r\n\t\tvalue: PropTypes.string,\r\n\t\tdefaultValue: PropTypes.string,\r\n\t\tonChange: PropTypes.func,\r\n\t\tsize:PropTypes.string,\r\n\t}\r\n\r\n\tstatic defaultProps = {\r\n\t\tsize: 'middle',\r\n\t\tonChange: () => {}\r\n\t}\r\n\r\n\tget isControl(){\r\n\t\treturn 'value' in this.props\r\n\t}\r\n\r\n\tget value() {\r\n\t\tif(this.isControl){\r\n\t\t\treturn this.props.value\r\n\t\t} else {\r\n\t\t\treturn this.state.innerValue\r\n\t\t}\r\n\t}\r\n\r\n\r\n\trender() {\r\n\t\tconst {\r\n\t\t\tfocus\r\n\t\t} = this.state\r\n\t\tconst { \r\n\t\t\tchildren,\r\n\t\t\tsize, \r\n\t\t\tsuffix,\r\n\t\t\tonChange,\r\n\t\t\trule= new RegExp(),\r\n\t\t\tmessage,\r\n\t\t\t...rest\r\n\r\n\t\t} = this.props\r\n\t\tlet cls = classNames({\r\n\t\t\tinput: true,\r\n\t\t\tfocus,\r\n\t\t\t[`size-${size}`]: true,\r\n\t\t\t'ui__input': true\r\n\t\t})\r\n\t\tconsole.log(rest); \r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t<div className={cls}> \r\n\t\t\t\t<input\r\n\t\t\t\t\tvalue={this.value}\r\n\r\n\t\t\t\t\tonFocus={e => {\r\n\t\t\t\t\t\tthis.setState({focus: true\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tonBlur={e => {\r\n\t\t\t\t\t\tthis.setState({focus: false\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\tif(!this.isControl){\r\n\t\t\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\t\t\tinnerValue: e.target.value\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.props.onChange(e)\r\n\t\t\t\t\t}}\r\n\t\t\t\t/> \r\n\r\n\r\n\t\t\t</div>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t{!rule.test(this.value) && message}\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.setState({\r\n\t\t\tinnerValue: this.props.defaultValue\r\n\t\t})\r\n\t}\r\n\r\n}\r\n\r\nconst App = (props) => {\r\n  const [value,setValue] = useState('aaa');\r\n  return (\r\n      <div> \r\n      <InputNumber value={value} onChange={e=>{}}/>\r\n      <InputNumber defaultValue={value} onChange={e=>{console.log('改变值')}}/>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './ui/Input/index';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}